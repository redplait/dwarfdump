diff --git a/gcc/dwarf2out.cc b/gcc/dwarf2out.cc
index c333c595026..9092b5350f4 100644
--- a/gcc/dwarf2out.cc
+++ b/gcc/dwarf2out.cc
@@ -9589,14 +9589,14 @@ size_of_die (dw_die_ref die)
 		    * a->dw_attr_val.v.val_vec.elt_size; /* block */
 	  break;
 	case dw_val_class_flag:
-	  if (dwarf_version >= 4)
+	  if (dwarf_version >= 4 && a->dw_attr_val.v.val_flag == 1 )
 	    /* Currently all add_AT_flag calls pass in 1 as last argument,
 	       so DW_FORM_flag_present can be used.  If that ever changes,
 	       we'll need to use DW_FORM_flag and have some optimization
 	       in build_abbrev_table that will change those to
 	       DW_FORM_flag_present if it is set to 1 in all DIEs using
 	       the same abbrev entry.  */
-	    gcc_assert (a->dw_attr_val.v.val_flag == 1);
+	    ; // gcc_assert (a->dw_attr_val.v.val_flag == 1);
 	  else
 	    size += 1;
 	  break;
@@ -10039,7 +10039,7 @@ value_format (dw_attr_node *a)
 	  gcc_unreachable ();
 	}
     case dw_val_class_flag:
-      if (dwarf_version >= 4)
+      if (dwarf_version >= 4 && a->dw_attr_val.v.val_flag == 1 )
 	{
 	  /* Currently all add_AT_flag calls pass in 1 as last argument,
 	     so DW_FORM_flag_present can be used.  If that ever changes,
@@ -10047,7 +10047,7 @@ value_format (dw_attr_node *a)
 	     in build_abbrev_table that will change those to
 	     DW_FORM_flag_present if it is set to 1 in all DIEs using
 	     the same abbrev entry.  */
-	  gcc_assert (a->dw_attr_val.v.val_flag == 1);
+	  // gcc_assert (a->dw_attr_val.v.val_flag == 1);
 	  return DW_FORM_flag_present;
 	}
       return DW_FORM_flag;
@@ -10937,11 +10937,10 @@ output_die (dw_die_ref die)
 		 in build_abbrev_table that will change those to
 		 DW_FORM_flag_present if it is set to 1 in all DIEs using
 		 the same abbrev entry.  */
-	      gcc_assert (AT_flag (a) == 1);
+	      // gcc_assert (AT_flag (a) == 1);
 	      if (flag_debug_asm)
-		fprintf (asm_out_file, "\t\t\t%s %s\n",
-			 ASM_COMMENT_START, name);
-	      break;
+		      fprintf (asm_out_file, "\t\t\t%s %s\n", ASM_COMMENT_START, name);
+	      if ( 1 == a->dw_attr_val.v.val_flag ) break;
 	    }
 	  dw2_asm_output_data (1, AT_flag (a), "%s", name);
 	  break;
@@ -22870,6 +22869,22 @@ gen_enumeration_type_die (tree type, dw_die_ref context_die)
   return type_die;
 }
 
+bool add_param_direction(tree decl, dw_die_ref parm_die)
+{
+  bool pa1 = lookup_attribute ("param_in", DECL_ATTRIBUTES (decl));
+  bool pa2 = lookup_attribute ("param_out", DECL_ATTRIBUTES (decl));
+  if ( !(pa1 ^ pa2) )
+    return false;
+  unsigned char pa_value = 0;
+  // seems that you can`t have flag with value 1 - see gcc_assert at line 9599
+  if ( pa1 )
+    pa_value = 2;
+  if ( pa2 )
+    pa_value = 3;
+  add_AT_flag(parm_die, (dwarf_attribute)0x28ff, pa_value);
+  return true;
+}
+
 /* Generate a DIE to represent either a real live formal parameter decl or to
    represent just the type of some formal parameter position in some function
    type.
@@ -22954,6 +22969,7 @@ gen_formal_parameter_die (tree node, tree origin, bool emit_name_p,
       if (reusing_die)
 	goto add_location;
 
+      add_param_direction(node, parm_die);
       if (origin != NULL)
 	add_abstract_origin_attribute (parm_die, origin);
       else if (emit_name_p)
@@ -24715,6 +24731,22 @@ gen_const_die (tree decl, dw_die_ref context_die)
 
 /* Generate a DIE to represent a label identifier.  */
 
+static int label_has_size(tree decl, unsigned int &v)
+{
+  if ( TREE_CODE(decl) != LABEL_DECL )
+    return 0;
+  auto r = DECL_RTL_IF_SET(decl);
+  if ( !r )
+    return 0;
+  auto jt = jump_table_for_label((const rtx_code_label *)r);
+  if ( jt && JUMP_TABLE_DATA_P(jt) )
+  {
+    v = jt->get_labels()->num_elem;
+    return 1;
+  }
+  return 0;
+}
+
 static void
 gen_label_die (tree decl, dw_die_ref context_die)
 {
@@ -24734,6 +24766,10 @@ gen_label_die (tree decl, dw_die_ref context_die)
 	add_name_and_src_coords_attributes (lbl_die, decl);
     }
 
+  unsigned int tab_size = 0;
+  if ( label_has_size(decl, tab_size) && tab_size)
+    add_AT_unsigned(lbl_die, DW_AT_byte_size, tab_size);
+
   if (DECL_ABSTRACT_P (decl))
     equate_decl_number_to_die (decl, lbl_die);
   else if (! early_dwarf)
